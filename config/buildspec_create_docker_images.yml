version: 0.2
env:
  variables:
    REGION: "us-east-1"
    FINAL_IMAGE_PUSH_REGION_LIST: "us-east-1"
phases:
  pre_build:
    commands:
      - apt-get update
      - apt-get install sudo -qq -o=Dpkg::Use-Pty=0
      - sudo apt-get install unzip -qq -o=Dpkg::Use-Pty=0
      - pip install --upgrade pip==19.3.1
      - cd $CODEBUILD_SRC_DIR  && chmod +x config/protoc_downloader.sh && ./config/protoc_downloader.sh && cd ..
      - pip install -q pytest wheel pyYaml pytest-html pre-commit awscli pytest-cov
  build:
    commands:
      - cd $CODEBUILD_SRC_DIR  && python setup.py bdist_wheel --universal
      - $(aws ecr get-login --registry-ids ${PREVIEW_REGISTRY_ID} --no-include-email --region ${REGION})
      - docker pull ${PREVIEW_REGISTRY_GPU}
      - docker pull ${PREVIEW_REGISTRY_CPU}
      - cd $CODEBUILD_SRC_DIR  && python setup.py bdist_wheel --universal
      - pip_name=`cd $CODEBUILD_SRC_DIR/dist/  && ls`
      - new_tag=$(date +%s)
      - echo "Build GPU image"
      - container_id=`docker run -di ${PREVIEW_REGISTRY_GPU}`
      - docker cp $CODEBUILD_SRC_DIR/dist/*.whl ${container_id}:/
      - docker exec ${container_id} pip install --force-reinstall tensorflow_datasets
      - docker exec ${container_id} pip uninstall -y smdebug
      - docker exec ${container_id} pip install --force-reinstall ${pip_name}
      # Check if smdebug has been installed
      - installed_version=`docker exec ${container_id} pip show smdebug | sed -n 2p | awk '{print $2}'`
      - expected_version=`cd $CODEBUILD_SRC_DIR/dist && ls *.whl | sed 's/smdebug-*//; s/-py2.*$//'`
      - if [ $installed_version != $expected_version ]; then echo "Failed to verify smdebug version." && exit 1 ; fi
      - image_id=`docker commit ${container_id} smprofiler:gpu`
      - for region in ${FINAL_IMAGE_PUSH_REGION_LIST}; do
          $(aws ecr get-login --registry-ids ${REGISTRY_ID} --no-include-email --region ${region}) &&
          docker tag smprofiler:gpu ${FINAL_IMAGE_GPU}:${new_tag} &&
          docker push ${FINAL_IMAGE_GPU}:${new_tag} &&
          docker tag smprofiler:gpu ${FINAL_IMAGE_GPU}:${TAG} &&
          docker push ${FINAL_IMAGE_GPU}:${TAG};
        done
      - docker stop ${container_id}
      - echo "Build CPU image"
      - container_id=`docker run -di ${PREVIEW_REGISTRY_CPU}`
      - docker cp $CODEBUILD_SRC_DIR/dist/*.whl ${container_id}:/
      - docker exec ${container_id} pip install --force-reinstall tensorflow_datasets
      - docker exec ${container_id} pip uninstall -y smdebug
      - docker exec ${container_id} pip install --force-reinstall ${pip_name}
      # Check if smdebug has been installed
      - installed_version=`docker exec ${container_id} pip show smdebug | sed -n 2p | awk '{print $2}'`
      - expected_version=`cd $CODEBUILD_SRC_DIR/dist && ls *.whl | sed 's/smdebug-*//; s/-py2.*$//'`
      - if [ $installed_version != $expected_version ]; then echo "Failed to verify smdebug version." && exit 1 ; fi
      - image_id=`docker commit ${container_id} smprofiler:cpu`
      - for region in ${FINAL_IMAGE_PUSH_REGION_LIST}; do
          $(aws ecr get-login --registry-ids ${REGISTRY_ID} --no-include-email --region ${region}) &&
          docker tag smprofiler:cpu ${FINAL_IMAGE_CPU}:${new_tag} &&
          docker push ${FINAL_IMAGE_CPU}:${new_tag} &&
          docker tag smprofiler:cpu ${FINAL_IMAGE_CPU}:${TAG} &&
          docker push ${FINAL_IMAGE_CPU}:${TAG};
        done
      - docker stop ${container_id}
  post_build:
    commands:
      - new_tag=$(date +%s)
      - aws s3 cp $CODEBUILD_SRC_DIR/dist/*.whl s3://smprofiler-nightly-binaries/$(date +%F)/
